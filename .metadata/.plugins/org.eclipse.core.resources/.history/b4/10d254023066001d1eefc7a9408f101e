package com.tyss.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tyss.entity.Superheroes;
import com.tyss.feignclientcontroller.SuperHeroRestController;
import com.tyss.response.MyResponse;

import io.github.resilience4j.bulkhead.annotation.Bulkhead;

@RestController
@RequestMapping("/avenger")
public class AvengerController {

	@Autowired
	private SuperHeroRestController controller;


	@GetMapping("/{id}")
//	@CircuitBreaker(name = "superhero-service", fallbackMethod = "response")
//	@Retry(name = "superhero-service", fallbackMethod = "response")
//	@RateLimiter(name = "superhero-service", fallbackMethod = "response")
//	@TimeLimiter(name = "superhero-service", fallbackMethod = "response")
	@Bulkhead(name = "superhero-service", fallbackMethod = "response")
	public MyResponse getSuperherodata(@PathVariable Integer id) {
		System.out.println("hii");
		return MyResponse.builder().message("called from avengers").data(controller.getSuperheroById(id).getBody().getData()).build();
	}
	
	@PostMapping("/add")
	public MyResponse addSuperhero(@RequestBody Superheroes superheroes) {
		return MyResponse.builder().message("called from avengers").data(controller.addSuperhero(superheroes).getBody().getData()).build();
	}
	
	public MyResponse response(Exception e) {
		return MyResponse.builder().data("Sorry buddy no data is present").message("Fallback method").build();
	}
	
	@GetMapping("/time")
	public MyResponse timelimiter() {
		System.out.println("hii");
		return MyResponse.builder().message("called from avengers").data(controller.getSuperheroById(id).getBody().getData()).build();
	}
	
	
	Runnable r = ()->{
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			System.out.println("catch block");
		}
		System.out.println("runnable method");
	};
}
